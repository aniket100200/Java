import java.util.*;
class Node
{
	//to implement need a LinkedList...
	
	int data;
	Node next;
	public Node(int data)
	{
		this.data=data;
		this.next=null;
	}
}
/* what is Queue..*/
//which has First in first out.. type in O(1)... okay...
class Queue 
{
	Node head;
	Node tail;
	int size;
	public Queue()
	{
		this.head=null;
		this.tail=null;
	}
    public void push(int value)
	{
	    //push operation should have O(1).. 
		//add to the Last takes O(1) time if you have tail..;
		Node newNode=new Node(value);
		size++;
		if(head==null)
		{
			head=tail=newNode;		
			return;
		}
		else
		{
				/* It will do it's Work*/
			tail.next=newNode;
			tail=newNode;
			
		}
    }
    public int pop()
	{
        //to pop I'll remove from first using head..
		if(head==null)
		{
			return -1;
		}
		size--;
		Node temp=head.next;
		int value=head.data;
		head.next=null;
		head=temp;
		return value;
    }
    public int front()
	{
        //Write your code here
		if(head==null)
		{
			return -1;
		}
		return head.data;
    }
    public int getSize()
	{
        //Write your code here
		return size;
    }
}

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        Queue q = new Queue();
        int n = sc.nextInt();
        for(int i = 0; i < n; i++) {
            int op = sc.nextInt();
            if(op == 1) {
                int x = sc.nextInt();
                q.push(x);
            }
            else if(op == 2) {
                System.out.println(q.pop());
            }
            else if(op == 3)
                System.out.println(q.front());
            else if(op == 4)
                System.out.println(q.getSize());
        }
    }
}
